# PrimeVul Layer-1 初始化 Prompts
# 每个 prompt 之间用 "=" * 80 分隔
# Prompt 中必须包含 {input} 占位符
#
# 重要: 所有 prompt 必须显式列出完整的类别选项
# 类别列表: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference',
#          'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues',
#          'Information Exposure', 'Other'

# Prompt 1: 直接分析型
Analyze this code for security vulnerabilities and classify it into ONE of these CWE major categories:
'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

If no vulnerability is found, respond with 'Benign'.
Respond ONLY with the category name.

Code to analyze:
{input}

CWE Major Category:

================================================================================

# Prompt 2: 安全专家角色
You are a security expert analyzing code for vulnerabilities.
Classify the code into ONE of these categories:
'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

For secure code, respond with 'Benign'.
Output ONLY the category name, nothing else.

Code:
{input}

Category:

================================================================================

# Prompt 3: 任务导向型
Security vulnerability classification task.

Available categories: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Examine the code and identify the PRIMARY vulnerability type.
If the code is secure, respond with 'Benign'.
Response format: Category name only.

Code to analyze:
{input}

Result:

================================================================================

# Prompt 4: 模式匹配型
Identify the security vulnerability pattern in this code.

Choose ONE category from: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Look for:
- Buffer Errors: buffer overflows, out-of-bounds access
- Injection: SQL/command/code injection vulnerabilities
- Memory Management: use-after-free, double-free, memory leaks
- Pointer Dereference: null pointer dereference
- Integer Errors: integer overflow/underflow
- Concurrency Issues: race conditions, deadlocks
- Path Traversal: directory traversal vulnerabilities
- Cryptography Issues: weak crypto, improper key management
- Information Exposure: sensitive data leaks
- Benign: no security issues found
- Other: other CWE types

Code:
{input}

Category:

================================================================================

# Prompt 5: 步骤分析型
Step-by-step security analysis:

1. Read the code carefully
2. Identify potential security issues
3. Classify into ONE of these categories: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Output format: Category name only.

Code:
{input}

Classification:

================================================================================

# Prompt 6: 特征检测型
Detect security vulnerability by examining code characteristics.

Categories: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Analysis focus:
- Check for buffer handling issues (Buffer Errors)
- Look for unsanitized inputs (Injection)
- Examine memory operations (Memory Management)
- Verify pointer usage (Pointer Dereference)
- Review integer operations (Integer Errors)
- Check thread safety (Concurrency Issues)
- Analyze file path handling (Path Traversal)
- Review cryptographic functions (Cryptography Issues)
- Check for data leakage (Information Exposure)

Code:
{input}

Category:

================================================================================

# Prompt 7: 简洁型
Classify this code's security vulnerability.

Categories: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Code:
{input}

Answer (category name only):

================================================================================

# Prompt 8: CWE专家型
As a CWE expert, classify this code into the most appropriate category.

Available CWE major categories: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Consider the primary security concern in the code.
Respond with only the category name.

Code:
{input}

Category:

================================================================================

# Prompt 9: 对比分析型
Compare this code against known vulnerability patterns.

Select ONE category: 'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Consider:
- What type of security flaw is present?
- Which CWE category best describes it?
- If no flaw exists, choose 'Benign'

Code:
{input}

Classification:

================================================================================

# Prompt 10: 上下文型
Security vulnerability detection and classification.

You must choose ONE category from this complete list:
'Benign', 'Buffer Errors', 'Injection', 'Memory Management', 'Pointer Dereference', 'Integer Errors', 'Concurrency Issues', 'Path Traversal', 'Cryptography Issues', 'Information Exposure', 'Other'

Analyze the code for security issues and select the most appropriate category.
For code without security issues, select 'Benign'.

Code to analyze:
{input}

Selected category:

================================================================================
