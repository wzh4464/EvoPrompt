#!/usr/bin/env python3
"""
智能漏洞检测运行器
集成结果存储、统计分析和智能prompt优化
"""

import os
import sys
import argparse
import time
from typing import List, Dict, Any

# 添加EvoPrompt路径
sys.path.append("./")

from args import parse_args
from utils import set_seed, setup_log
from enhanced_vulnerability_evaluator import create_enhanced_evaluator
from intelligent_evolution import IntelligentEvolutionManager
from evolution_tracker import create_evolution_tracker
from run_vulnerability_detection import setup_vulnerability_detection_data


def main():
    """智能漏洞检测主函数"""
    print("🧠 Starting Intelligent Vulnerability Detection System")
    print("=" * 60)
    
    # 解析参数
    args = parse_args()
    
    # 设置任务类型（如果未指定）
    if not hasattr(args, 'task') or not args.task:
        args.task = "vul_detection"
    
    # 设置默认参数
    if not hasattr(args, 'dataset') or not args.dataset:
        args.dataset = "sven"
    
    # 设置language_model参数（evaluator.py需要）
    if not hasattr(args, 'language_model') or not args.language_model:
        args.language_model = "gpt-3.5-turbo"
    
    # 设置输出目录
    if not hasattr(args, 'output') or not args.output:
        args.output = f"./outputs/intelligent_vul_detection/{args.dataset}/"
    
    # 创建输出目录
    os.makedirs(args.output, exist_ok=True)
    
    # 设置种子
    set_seed(args.seed)
    
    print(f"📊 Configuration:")
    print(f"  Dataset: {args.dataset}")
    print(f"  Evolution Mode: {args.evo_mode}")
    print(f"  Population Size: {args.popsize}")
    print(f"  Generations: {args.budget}")
    print(f"  Sample Size: {args.sample_num}")
    print(f"  Output Directory: {args.output}")
    print("")
    
    try:
        # 设置数据
        print("📁 Setting up vulnerability detection data...")
        setup_vulnerability_detection_data(args)
        
        # 创建增强版评估器
        print("🔬 Creating enhanced evaluator...")
        evaluator = create_enhanced_evaluator(args)
        
        # 创建智能进化管理器
        print("🧠 Creating intelligent evolution manager...")
        manager = IntelligentEvolutionManager(args, evaluator)
        
        # 运行智能进化
        print("🚀 Starting intelligent evolution process...")
        print("=" * 60)
        
        start_time = time.time()
        manager.run_intelligent_evolution()
        elapsed_time = time.time() - start_time
        
        print("=" * 60)
        print("✅ Intelligent vulnerability detection completed!")
        print(f"⏱️ Total time: {elapsed_time:.2f} seconds")
        
        # 显示结果摘要
        summary = evaluator.get_experiment_summary()
        print(f"📊 Results Summary:")
        print(f"  Experiment: {summary.get('experiment_name', 'N/A')}")
        print(f"  Total Generations: {summary.get('total_generations', 0)}")
        print(f"  Best Score: {summary.get('best_score', 0):.4f}")
        print(f"  Final Avg Score: {summary.get('final_avg_score', 0):.4f}")
        print(f"  Cache Entries: {summary.get('cache_entries', 0)}")
        print(f"📁 Results saved in: {args.output}")
        
        # 提供后续分析建议
        print("\n💡 Next Steps:")
        print("  1. Check the analysis reports in the output directory")
        print("  2. Review the optimization strategies generated")
        print("  3. Use the best prompts for production vulnerability detection")
        print("  4. Consider fine-tuning based on the statistical insights")
        
    except KeyboardInterrupt:
        print("\n⚠️ Process interrupted by user")
        print("💾 Partial results may be saved in the output directory")
        
    except Exception as e:
        print(f"\n❌ Intelligent vulnerability detection failed: {e}")
        print("\n🔧 Troubleshooting tips:")
        print("  - Check your .env configuration")
        print("  - Ensure API_KEY is set correctly")
        print("  - Verify API endpoints are accessible")
        print("  - Try reducing popsize and budget for testing")
        
        # 保存错误信息
        error_log = os.path.join(args.output, "error.log")
        with open(error_log, 'w') as f:
            import traceback
            f.write(f"Error occurred at: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Error message: {str(e)}\n")
            f.write(f"Traceback:\n{traceback.format_exc()}")
        
        print(f"📝 Error details saved to: {error_log}")
        
        raise


def create_intelligent_analysis_report(output_dir: str):
    """创建智能分析报告（独立功能）"""
    print("📊 Creating intelligent analysis report...")
    
    # 这里可以添加离线分析功能
    # 例如读取已有的实验数据，生成详细报告
    
    pass


def batch_run_experiments(configs: List[Dict[str, Any]]):
    """批量运行实验（高级功能）"""
    print("🔄 Running batch experiments...")
    
    results = []
    
    for i, config in enumerate(configs):
        print(f"\n🧪 Running experiment {i+1}/{len(configs)}")
        print(f"Config: {config}")
        
        # 创建参数对象
        class BatchArgs:
            def __init__(self, config_dict):
                for key, value in config_dict.items():
                    setattr(self, key, value)
        
        args = BatchArgs(config)
        
        try:
            # 运行单个实验
            # 这里可以调用main函数的核心逻辑
            print(f"✅ Experiment {i+1} completed")
            results.append({"config": config, "status": "success"})
            
        except Exception as e:
            print(f"❌ Experiment {i+1} failed: {e}")
            results.append({"config": config, "status": "failed", "error": str(e)})
    
    return results


if __name__ == "__main__":
    # 检查是否有特殊命令
    if len(sys.argv) > 1 and sys.argv[1] == "--batch":
        # 批量运行模式
        print("🔄 Batch mode not implemented yet")
        
    elif len(sys.argv) > 1 and sys.argv[1] == "--analyze":
        # 分析模式
        output_dir = sys.argv[2] if len(sys.argv) > 2 else "./outputs/"
        create_intelligent_analysis_report(output_dir)
        
    else:
        # 正常运行模式
        main()