[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "evoprompt"
version = "0.1.0"
description = "Evolutionary Prompt Optimization Framework"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "EvoPrompt Team", email = "evoprompt@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["llm", "prompt-engineering", "evolutionary-algorithms", "optimization"]
requires-python = ">=3.9"
dependencies = [
    "accelerate>=0.21.0",
    "backoff>=2.2.1",
    "datasets>=2.13.1",
    "jsonlines>=3.1.0",
    "numpy>=1.23.3",
    "openai>=1.0.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "rouge>=1.0.1", 
    "sacrebleu>=2.3.1",
    "scikit-learn>=1.3",
    "termcolor>=2.3.0",
    "torch>=2.1",
    "tqdm>=4.64.1",
    "transformers>=4.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]
vulnerability = [
    "bitsandbytes>=0.41.1",
    "comet>=3.1.0",
    "easse",
    "fairseq>=0.12.2",
    "mosestokenizer>=1.2.1",
    "msal>=1.20.0",
    "nevergrad>=0.7.0",
    "unbabel-comet>=2.2.6",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/evoprompt/evoprompt"
Documentation = "https://evoprompt.readthedocs.io"
Repository = "https://github.com/evoprompt/evoprompt.git"
Issues = "https://github.com/evoprompt/evoprompt/issues"

[project.scripts]
evoprompt = "evoprompt.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/evoprompt"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/evoprompt --cov=tests {args}"
type-check = "mypy src/evoprompt"

[tool.hatch.envs.lint]
dependencies = [
    "black",
    "isort", 
    "flake8",
    "mypy",
]

[tool.hatch.envs.lint.scripts]
format = [
    "black src/evoprompt tests",
    "isort src/evoprompt tests",
]
lint = [
    "flake8 src/evoprompt tests",
    "mypy src/evoprompt",
]
check = [
    "format",
    "lint",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/evoprompt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | legacy
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["evoprompt"]
skip_glob = ["legacy/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "legacy",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "legacy/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "sacrebleu.*",
    "rouge.*",
    "openai.*",
    "nevergrad.*",
]
ignore_missing_imports = true

[tool.uv.sources]
transformers = { git = "https://github.com/huggingface/transformers.git" }
easse = { git = "https://github.com/feralvam/easse.git" }